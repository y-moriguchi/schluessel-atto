#machine DFABuilder
#option targetLanguage=JavaScript
                            +--'\n'-+
 *S****       @@@@@@@@@@@@@@v@     @^@@@@@@@
 *    >-{exp}->              >-';'->       @
 ****v*       @v@@@@@@@@@@@@^@     @v@@@^@@@
     |         +-[\s\u0001]-+       +-.-+
     |      ***
     +--')'-> *
            ***
-- exp --
                                          +---')'---------------------------------+
                                          |+---------+                            |
 *S**********                      *******^v*       *^********************       @v@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *          >-'('/'$this.initc();'->        >-{exp}->$this.addc($this._);>-+     @$this._ = $this.endc($mille.nil);@
 *v******^*v*                      *v******^*       ********************** |     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  +-[\s]-+ |                        +-[\s]-+                               |
           |                                 +-----------------------------+
           |                                 |            ***           ***       ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           |                                 +-/?=\.[\s]/-> >-/\.[\s]*/-> >-{exp}-> >-')'->$this._ = $this.endc($this._);@
           |                                              ***           ***       ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           |
           |     **********       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           +-[']->        >-{exp}->$this._ = $this.quote($this._);@
           |     *v******^*       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           |      +-[\s]-+
           |
           |     **********       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           +-'^'->        >-{exp}->$this._ = $this.qlambda($this._);@
           |     *v******^*       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
           |      +-[\s]-+
           |                              +--------------------------------')'--+
           |                              |+---------+                          |
           |                       *******^v*       *^********************     @v@@@@@@@@@@@@@@@@@@@@@@@
           +-"#("/'$this.initv();'->        >-{exp}->$this.addv($this._);*     @$this._ = $this.endv();@
           |                       *v******^*       **********************     @@@@@@@@@@@@@@@@@@@@@@@@@
           |                        +-[\s]-+
           |      +-.-+
           |     *^***v*
           +-';'->     >-'\n'-(S)
           |     *******
           |
           |          ***
           +-[\u0001]-> *
           |          ***
           |
           |         @@@
           +-{value}-> @
                     @@@
-- value --
                                                                                                                                             ***
         +----/?=[\-+]?([0-9]*\.[0-9]+|[0-9]+)([eE][\-+]?[0-9]+)?(i|[\-+]([0-9]*\.[0-9]+|[0-9]+)([eE][\-+]?[0-9]+)?i)?[ \t\n;()#"',`\u0001]/-> *
         |                                                                                                                                   *v*
         |    +-------------------------------------------------------------------------------------------------------------------------------+
         |    |
 *S******^*   |          @@@@@@@@@@@@@@@@@@@@@@@       ***          ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 *        >-+ +-{:float}->$this._ = $this.$num;>-+-'+'-> >-{:float}-> >-'i'->$this._ = $mille.c.make($this._, $this.$num);@
 *v******^* |            @@@@@@@@@@@@@@@@@@@@@@@ |     ***          ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  +-[\s]-+  |                                    |
            |                                    |     ***          ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                                    +-'-'-> >-{:float}-> >-'i'->$this._ = $mille.c.make($this._, -$this.$num);@
            |                                    |     ***          ***     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                                    |
            |                                    |     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                                    +-'i'->$this._ = $mille.c.make(0, $this._);@
            |                                          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                          +-.-+
            |                         *^***v*************     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            +-'"'/'$this.clearbuf();'->$this.addbuf($c);>-'"'->$this._ = $this.str($this.buf);@
            |                         *v*^***************     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                          | +-.----+
            |                          |        |
            |                          +-'\\'-+ |
            |                         ********v*^********
            |                         *$this.addbuf($c);*
            |                         *******************
            |                                                             +-[^ \t\n;()#"',`\u0001]-+
            |     *******************                                    *^************************v* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            +-'#'->$this.clearbuf();>-+-[^/^bBoOxX\\ \t\n;()#"',`\u0001]->$this.addbuf($c);         >->$this._ = $this.sharp($this.buf);@
            |     ******************* |                                  **************************** @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         |                                                                    +-[a-zA-Z]-+
            |                         |      ******            ****************                           *^**********v******
            |                         +-'\\'->    >-+-[a-zA-Z]->$this.ch = $c;>-[a-zA-Z]/'$this.addch();'->$this.addbuf($c);*
            |                         |      ****** |          *v**************                           *v*****************
            |                         |             |           +------+                             +-----+
            |                         |             |   @@@@@@@@@@@@@@@  @v@@@@@@@@@@@@@@@@@@@      @v@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         |             +-.->$this._ = $c;@  @$this._ = $this.ch;@      @$this._ = $this.chrname($this.buf);@
            |                         |                 @@@@@@@@@@@@@@@  @@@@@@@@@@@@@@@@@@@@@      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         |                +-[01]-+
            |                         |      ***      *^******v********** @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         +-[bB]-> >-[01]->$this.addbuf($c);>->$this._ = parseInt($this.buf, 2);@
            |                         |      ***      ******************* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         |                 +-[0-7]-+
            |                         |      ***       *^*******v********* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         +-[oO]-> >-[0-7]->$this.addbuf($c);>->$this._ = parseInt($this.buf, 8);@
            |                         |      ***       ******************* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         |                       +-[0-9a-fA-F]-+
            |                         |      ***             *^*************v*** @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            |                         +-[xX]-> >-[0-9A-Fa-f]->$this.addbuf($c);>->$this._ = parseInt($this.buf, 16);@
            |                         |      ***             ******************* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            | +-----------------------+
            | |                              +----./'$this.addbuf($c);'-+                          +---+
            | |     *************************v***      *****************^* @@@@@@@@@@@@@@@@@@@@@@@@v@ *^*******************************
            | +-'/'->                           >-'\\'->$this.addbuf($c);* @$this._ = $this.newre();@ *                               *
            |       *v***********************^*v*      ******************* @@@@@@@@@@@@@@@@@@@@@@@@@@ *^*v***************************^*
            |        +-./'$this.addbuf($c);'-+ +--'/'/'$this.re = $this.buf;$this.clearbuf()'----------+ +-[a-z]/'$this.addbuf($c);'-+
            |
            |      +-.-+
            |     *^***v*
            +-';'->     >-'\n'-(S)
            |     *******
            |
            |          ***
            +-[\u0001]-> *
            |          ***
            |                        +-[^ \t\n;()#"',`\u0001]-+
            |                       *^************************v* @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
            +-./'$this.clearbuf();'->$this.addbuf($c);         >->$this._ = $this.sym($this.buf);@
                                    **************************** @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
%%
SExpression.sharpHash = {
	't': true,
	'f': false
};
SExpression.charnameHash = {
	'newline': '\n'.charCodeAt(0),
	'space':   ' '.charCodeAt(0)
};
SExpression.prototype.initc = function() {
	if(this.sstack === undefined) {
		this.sstack = [];
	}
	this.sstack.push({
		exp: undefined,
		ptr: undefined
	});
};
SExpression.prototype.addc = function(x) {
	var s = this.sstack.pop();
	if(s.exp === undefined) {
		s.exp = s.ptr = $mille.cons(x, $mille.nil);
	} else {
		s.ptr.cdr = $mille.cons(x, $mille.nil);
		s.ptr = s.ptr.cdr;
	}
	this.sstack.push(s);
};
SExpression.prototype.endc = function(x) {
	var s = this.sstack.pop();
	if(s.exp === undefined) {
		return $mille.nil;
	} else {
		s.ptr.cdr = x;
		return s.exp;
	}
};
SExpression.prototype.initv = function() {
	if(this.sstack === undefined) {
		this.sstack = [];
	}
	this.sstack.push([]);
};
SExpression.prototype.addv = function(x) {
	var s = this.sstack.pop();
	s.push(x);
	this.sstack.push(s);
};
SExpression.prototype.endv = function(x) {
	return this.sstack.pop();
};
SExpression.prototype.quote = function(x) {
	return $mille.cons($mille.getSymbol('quote'), $mille.cons(x, $mille.nil));
};
SExpression.prototype.qlambda = function(x) {
	return $mille.cons($mille.getSymbol('lambda'),
			$mille.cons($mille.nil, $mille.cons(x, $mille.nil)));
};
SExpression.prototype.clearbuf = function() {
	this.buf = '';
};
SExpression.prototype.addbuf = function(c) {
	this.buf += String.fromCharCode(c);
};
SExpression.prototype.str = function(s) {
	var c, i, r = '', b;
	for(i = 1; i < s.length; i++) {
		c = s.charAt(i);
		if(c !== '\\') {
			r += c;
		} else if(i + 1 === s.length) {
			$mille.o.error('Token exception');
		} else if((c = s.charAt(++i)) === '\\') {
			r += '\\\\';
		} else if(c === '\"') {
			r += '\"';
		} else if(c === 'a') {
			r += '\u0007';
		} else if(c === 'b') {
			r += '\b';
		} else if(c === 't') {
			r += '\t';
		} else if(c === 'n') {
			r += '\n';
		} else if(c === 'v') {
			r += '\u0008';
		} else if(c === 'f') {
			r += '\u000c';
		} else if(c === 'r') {
			r += '\r';
		} else if(c === 'x' || c === 'u') {
			b = '';
			while(++i < s.length) {
				c = s.charAt(i);
				if((c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
						(c >= 'A' && c <= 'F')) {
					b += c;
				} else {
					break;
				}
			}
			if(b.length === 0) {
				$mille.o.error('Token Exception');
			} else if((c = parseInt(b, 16)) > 0xffff) {
				$mille.o.error('invalid unicode');
			} else {
				r += String.fromCharCode(c);
			}
		} else {
			$mille.o.error('Invalid escape sequence');
		}
	}
	return r;
};
SExpression.prototype.sharp = function(b) {
	var x;
	if((x = SExpression.sharpHash[b]) !== undefined) {
		return x;
	} else {
		$mille.o.error('unknown sharp: ' + b);
	}
};
SExpression.prototype.chrname = function(b) {
	var x;
	if((x = SExpression.charnameHash[b]) !== undefined) {
		return x;
	} else {
		$mille.o.error('unknown character name: ' + b);
	}
};
SExpression.prototype.addch = function(b) {
	this.buf += String.fromCharCode(this.ch);
};
SExpression.prototype.sym = function(b) {
	return $mille.getSymbol(b);
};
SExpression.prototype.newre = function() {
	if(this.buf === '') {
		return new RegExp(this.re);
	} else {
		return new RegExp(this.re, this.buf);
	}
};
