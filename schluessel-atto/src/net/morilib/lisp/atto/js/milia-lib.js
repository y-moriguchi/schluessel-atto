$env.bind('caar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))));}))
$env.bind('cadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))));}))
$env.bind('cdar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))));}))
$env.bind('cddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))));}))
$env.bind('caaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('caar')  , $env.find('x')  ))));}))
$env.bind('caadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cadr')  , $env.find('x')  ))));}))
$env.bind('cadar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdar')  , $env.find('x')  ))));}))
$env.bind('caddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cddr')  , $env.find('x')  ))));}))
$env.bind('cdaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('caar')  , $env.find('x')  ))));}))
$env.bind('cdadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cadr')  , $env.find('x')  ))));}))
$env.bind('cddar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdar')  , $env.find('x')  ))));}))
$env.bind('cdddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cddr')  , $env.find('x')  ))));}))
$env.bind('caaaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('caaar')  , $env.find('x')  ))));}))
$env.bind('caaadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('caadr')  , $env.find('x')  ))));}))
$env.bind('caadar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cadar')  , $env.find('x')  ))));}))
$env.bind('caaddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('caddr')  , $env.find('x')  ))));}))
$env.bind('cadaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdaar')  , $env.find('x')  ))));}))
$env.bind('cadadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdadr')  , $env.find('x')  ))));}))
$env.bind('caddar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cddar')  , $env.find('x')  ))));}))
$env.bind('cadddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdddr')  , $env.find('x')  ))));}))
$env.bind('cdaaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('caaar')  , $env.find('x')  ))));}))
$env.bind('cdaadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('caadr')  , $env.find('x')  ))));}))
$env.bind('cdadar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cadar')  , $env.find('x')  ))));}))
$env.bind('cdaddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('caddr')  , $env.find('x')  ))));}))
$env.bind('cddaar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdaar')  , $env.find('x')  ))));}))
$env.bind('cddadr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdadr')  , $env.find('x')  ))));}))
$env.bind('cdddar', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cddar')  , $env.find('x')  ))));}))
$env.bind('cddddr', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdddr')  , $env.find('x')  ))));}))
$env.bind('not', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(( $env.find('x')  )===false) ?  false  :  true )));}))
$env.bind('boolean?', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#1', a0 === undefined ? null : a0);return (((!(( $env.find('#1')  )===false) ?  $env.find('#1')   : $mille.apply( $env.find('eq?')  , $env.find('x')  , false ))));}),$mille.apply( $env.find('eq?')  , $env.find('x')  , true ))));}))
$env.bind('pair?', $mille.closure($env, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  false  : (!(($mille.apply( $env.find('atom?')  , $env.find('x')  ))===false) ?  false  :  true ))));}))
//$env.bind('equal?', $mille.closure($env, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);return (($env.bind('vector-equal?', $mille.closure($env, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);$env.bind('i', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('=')  ,$mille.apply( $env.find('vector-length')  , $env.find('x')  ), $env.find('i')  ))===false) ? (( true )) : (!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('equal?')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('i')  ),$mille.apply( $env.find('vector-ref')  , $env.find('y')  , $env.find('i')  ))))===false) ? (( false )) : (($mille.apply( $env.find('vector-equal?')  , $env.find('x')  , $env.find('y')  ,$mille.apply( $env.find('+')  , $env.find('i')  , 1.0 ))))))));}))),((!(($mille.apply( $env.find('eqv?')  , $env.find('x')  , $env.find('y')  ))===false) ? (( true )) : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? (((!(($mille.apply( $env.find('pair?')  , $env.find('y')  ))===false) ? (!(($mille.apply( $env.find('equal?')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('car')  , $env.find('y')  )))===false) ? $mille.apply( $env.find('equal?')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ),$mille.apply( $env.find('cdr')  , $env.find('y')  )) :  false ) :  false ))) : (!(($mille.apply( $env.find('string?')  , $env.find('x')  ))===false) ? (((!(($mille.apply( $env.find('string?')  , $env.find('y')  ))===false) ? $mille.apply( $env.find('string=?')  , $env.find('x')  , $env.find('y')  ) :  false ))) : (!(($mille.apply( $env.find('vector?')  , $env.find('x')  ))===false) ? (((!(($mille.apply( $env.find('vector?')  , $env.find('y')  ))===false) ? (!(($mille.apply( $env.find('=')  ,$mille.apply( $env.find('vector-length')  , $env.find('x')  ),$mille.apply( $env.find('vector-length')  , $env.find('y')  )))===false) ? $mille.apply( $env.find('vector-equal?')  , $env.find('x')  , $env.find('y')  , 0.0 ) :  false ) :  false ))) : (( false ))))))));}))
$env.bind('member', $mille.closure($env, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('lis', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('lis')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('equal?')  , $env.find('x')  ,$mille.apply( $env.find('car')  , $env.find('lis')  )))===false) ? (( $env.find('lis')  )) : (($mille.apply( $env.find('member')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('lis')  ))))))));}))
$env.bind('assq', $mille.closure($env, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('lis', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('lis')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('lis')  ))))===false) ? (($mille.apply( $env.find('error')  ,$mille.apply( $env.find('get-default-message')  , "err.require.pair" )))) : (!(($mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('caar')  , $env.find('lis')  ), $env.find('x')  ))===false) ? (($mille.apply( $env.find('car')  , $env.find('lis')  ))) : (($mille.apply( $env.find('assq')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('lis')  )))))))));}))
$env.bind('assv', $mille.closure($env, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('lis', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('lis')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('lis')  ))))===false) ? (($mille.apply( $env.find('error')  ,$mille.apply( $env.find('get-default-message')  , "err.require.pair" )))) : (!(($mille.apply( $env.find('eqv?')  ,$mille.apply( $env.find('caar')  , $env.find('lis')  ), $env.find('x')  ))===false) ? (($mille.apply( $env.find('car')  , $env.find('lis')  ))) : (($mille.apply( $env.find('assv')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('lis')  )))))))));}))
$env.bind('assoc', $mille.closure($env, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('lis', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('lis')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('lis')  ))))===false) ? (($mille.apply( $env.find('error')  ,$mille.apply( $env.find('get-default-message')  , "err.require.pair" )))) : (!(($mille.apply( $env.find('equal?')  ,$mille.apply( $env.find('caar')  , $env.find('lis')  ), $env.find('x')  ))===false) ? (($mille.apply( $env.find('car')  , $env.find('lis')  ))) : (($mille.apply( $env.find('assoc')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('lis')  )))))))));}))
$env.bind('list', $mille.closure($env, this, function($env) {var a = $mille.a.toArray(arguments,1);$env.bind('l',$mille.listToCell(a));return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#2', a0 === undefined ? null : a0);return ((($env.set('#2',$mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#3')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('#3')  ),$mille.apply( $env.find('#2')  ,$mille.apply( $env.find('cdr')  , $env.find('#3')  ))))));})), undefined)),( $env.find('#2')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l')  )));}))
$env.bind('length', $mille.closure($env, this, function($env,a0) {$env.bind('l', a0 === undefined ? null : a0);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return ((($env.set('#3',$mille.closure($env, this, function($env,a0,a1) {$env.bind('#4', a0 === undefined ? null : a0);$env.bind('#5', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('#4')  ))===false) ?  $env.find('#5')   : $mille.apply( $env.find('#3')  ,$mille.apply( $env.find('cdr')  , $env.find('#4')  ),$mille.apply( $env.find('1+')  , $env.find('#5')  )))));})), undefined)),( $env.find('#3')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l')  , 0.0 )));}))
$env.bind('list-ref', $mille.closure($env, this, function($env,a0,a1) {$env.bind('l', a0 === undefined ? null : a0);$env.bind('n', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('<')  , $env.find('n')  , 0.0 ))===false) ? $mille.apply( $env.find('error')  , "list-ref" ) : undefined)),((!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('pair?')  , $env.find('l')  )))===false) ? (($mille.apply( $env.find('error')  , "list-ref" ))) : (!(($mille.apply( $env.find('<=')  , $env.find('n')  , 0.0 ))===false) ? (($mille.apply( $env.find('car')  , $env.find('l')  ))) : (($mille.apply( $env.find('list-ref')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ),$mille.apply( $env.find('-')  , $env.find('n')  , 1.0 ))))))));}))
$env.bind('list-tail', $mille.closure($env, this, function($env,a0,a1) {$env.bind('l', a0 === undefined ? null : a0);$env.bind('n', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('<')  , $env.find('n')  , 0.0 ))===false) ? $mille.apply( $env.find('error')  , "list-tail" ) : undefined)),((!(($mille.apply( $env.find('<=')  , $env.find('n')  , 0.0 ))===false) ? (( $env.find('l')  )) : (!(($mille.apply( $env.find('not')  ,$mille.apply( $env.find('pair?')  , $env.find('l')  )))===false) ? (($mille.apply( $env.find('error')  , "list-tail" ))) : (($mille.apply( $env.find('list-tail')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ),$mille.apply( $env.find('-')  , $env.find('n')  , 1.0 ))))))));}))
$env.bind('list->string', $mille.closure($env, this, function($env,a0) {$env.bind('l', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('l')  ))===false) ? (( "" )) : (($mille.apply( $env.find('string-append')  ,$mille.apply( $env.find('->string')  ,$mille.apply( $env.find('car')  , $env.find('l')  )),$mille.apply( $env.find('list->string')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ))))))));}))
$env.bind('append', $mille.closure($env, this, function($env) {var a = $mille.a.toArray(arguments,1);$env.bind('l',$mille.listToCell(a));return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#2', a0 === undefined ? null : a0);return ((($env.set('#2',$mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#3')  ))===false) ? (( $mille.nil )) : (!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('cdr')  , $env.find('#3')  )))===false) ? (($mille.apply( $env.find('car')  , $env.find('#3')  ))) : (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#5', a0 === undefined ? null : a0);return ((($env.set('#5',$mille.closure($env, this, function($env,a0) {$env.bind('#6', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#6')  ))===false) ? $mille.apply( $env.find('#2')  ,$mille.apply( $env.find('cdr')  , $env.find('#3')  )) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('#6')  ),$mille.apply( $env.find('#5')  ,$mille.apply( $env.find('cdr')  , $env.find('#6')  ))))));})), undefined)),( $env.find('#5')  ));}),(!(( false )===false) ?  false  : undefined)),$mille.apply( $env.find('car')  , $env.find('#3')  ))))))));})), undefined)),( $env.find('#2')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l')  )));}))
$env.bind('reverse', $mille.closure($env, this, function($env,a0) {$env.bind('l', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('pair?')  , $env.find('l')  ))===false) ? $mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return ((($env.set('#3',$mille.closure($env, this, function($env,a0,a1) {$env.bind('#4', a0 === undefined ? null : a0);$env.bind('#5', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('#4')  ))===false) ?  $env.find('#5')   : $mille.apply( $env.find('#3')  ,$mille.apply( $env.find('cdr')  , $env.find('#4')  ),$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('#4')  ), $env.find('#5')  )))));})), undefined)),( $env.find('#3')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l')  , $mille.nil ) :  $env.find('l')  )));}))
$env.bind('memq', $mille.closure($env, this, function($env,a0,a1) {$env.bind('o', a0 === undefined ? null : a0);$env.bind('l', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('l')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('eq?')  , $env.find('o')  ,$mille.apply( $env.find('car')  , $env.find('l')  )))===false) ? (( $env.find('l')  )) : (($mille.apply( $env.find('memq')  , $env.find('o')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ))))))));}))
$env.bind('memv', $mille.closure($env, this, function($env,a0,a1) {$env.bind('o', a0 === undefined ? null : a0);$env.bind('l', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('l')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('eqv?')  , $env.find('o')  ,$mille.apply( $env.find('car')  , $env.find('l')  )))===false) ? (( $env.find('l')  )) : (($mille.apply( $env.find('memq')  , $env.find('o')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ))))))));}))
$env.bind('list?', $mille.closure($env, this, function($env,a0) {$env.bind('l', a0 === undefined ? null : a0);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return ((($env.set('#3',$mille.closure($env, this, function($env,a0,a1) {$env.bind('#4', a0 === undefined ? null : a0);$env.bind('#5', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('#4')  ))===false) ? (( true )) : (!(($mille.apply( $env.find('memq')  , $env.find('#4')  , $env.find('#5')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('pair?')  , $env.find('#4')  ))===false) ? (($mille.apply( $env.find('#3')  ,$mille.apply( $env.find('cdr')  , $env.find('#4')  ),$mille.apply( $env.find('cons')  , $env.find('#4')  , $env.find('#5')  )))) : (( false )))))));})), undefined)),( $env.find('#3')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l')  , $mille.nil )));}))
$env.bind('map', $mille.closure($env, this, function($env,a0) {$env.bind('p', a0 === undefined ? null : a0);var a = $mille.a.toArray(arguments,2);$env.bind('l1',$mille.listToCell(a));return (($env.bind('cx', $mille.closure($env, this, function($env,a0,a1) {$env.bind('p', a0 === undefined ? null : a0);$env.bind('l2', a1 === undefined ? null : a1);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#2', a0 === undefined ? null : a0);return ((($env.set('#2',$mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#3')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('p')  ,$mille.apply( $env.find('car')  , $env.find('#3')  )),$mille.apply( $env.find('#2')  ,$mille.apply( $env.find('cdr')  , $env.find('#3')  ))))));})), undefined)),( $env.find('#2')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l2')  )));}))),($env.bind('n?', $mille.closure($env, this, function($env,a0) {$env.bind('l2', a0 === undefined ? null : a0);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#5', a0 === undefined ? null : a0);return ((($env.set('#5',$mille.closure($env, this, function($env,a0) {$env.bind('#6', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#6')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('car')  , $env.find('#6')  )))===false) ? (( true )) : (($mille.apply( $env.find('#5')  ,$mille.apply( $env.find('cdr')  , $env.find('#6')  ))))))));})), undefined)),( $env.find('#5')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l2')  )));}))),($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#8', a0 === undefined ? null : a0);return ((($env.set('#8',$mille.closure($env, this, function($env,a0) {$env.bind('#9', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('n?')  , $env.find('#9')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('apply')  , $env.find('p')  ,$mille.apply( $env.find('cx')  , $env.find('car')  , $env.find('#9')  )),$mille.apply( $env.find('#8')  ,$mille.apply( $env.find('cx')  , $env.find('cdr')  , $env.find('#9')  ))))));})), undefined)),( $env.find('#8')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l1')  )));}))
$env.bind('for-each', $mille.closure($env, this, function($env,a0) {$env.bind('p', a0 === undefined ? null : a0);var a = $mille.a.toArray(arguments,2);$env.bind('l1',$mille.listToCell(a));return (($env.bind('cx', $mille.closure($env, this, function($env,a0,a1) {$env.bind('p', a0 === undefined ? null : a0);$env.bind('l2', a1 === undefined ? null : a1);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#2', a0 === undefined ? null : a0);return ((($env.set('#2',$mille.closure($env, this, function($env,a0) {$env.bind('#3', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#3')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('p')  ,$mille.apply( $env.find('car')  , $env.find('#3')  )),$mille.apply( $env.find('#2')  ,$mille.apply( $env.find('cdr')  , $env.find('#3')  ))))));})), undefined)),( $env.find('#2')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l2')  )));}))),($env.bind('n?', $mille.closure($env, this, function($env,a0) {$env.bind('l2', a0 === undefined ? null : a0);return (($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#5', a0 === undefined ? null : a0);return ((($env.set('#5',$mille.closure($env, this, function($env,a0) {$env.bind('#6', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('#6')  ))===false) ? (( false )) : (!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('car')  , $env.find('#6')  )))===false) ? (( true )) : (($mille.apply( $env.find('#5')  ,$mille.apply( $env.find('cdr')  , $env.find('#6')  ))))))));})), undefined)),( $env.find('#5')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l2')  )));}))),($mille.apply($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('#8', a0 === undefined ? null : a0);return ((($env.set('#8',$mille.closure($env, this, function($env,a0) {$env.bind('#9', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('n?')  , $env.find('#9')  ))===false) ?  $mille.nil  : (($mille.apply( $env.find('apply')  , $env.find('p')  ,$mille.apply( $env.find('cx')  , $env.find('car')  , $env.find('#9')  ))),($mille.apply( $env.find('#8')  ,$mille.apply( $env.find('cx')  , $env.find('cdr')  , $env.find('#9')  )))))));})), undefined)),( $env.find('#8')  ));}),(!(( false )===false) ?  false  : undefined)), $env.find('l1')  )));}))
