$mille.macroenv = $mille.newenv($env, this);
$mille.macroenv.bind('macroenv',  $mille.cons( $mille.nil , $mille.nil ) )
$mille.macroenv.bind('pattern-id',  0.0 )
$mille.macroenv.bind('consf', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);return (((!(( $env.find('x')  )===false) ? (!(( $env.find('y')  )===false) ? $mille.apply( $env.find('cons')  , $env.find('x')  , $env.find('y')  ) :  $mille.nil ) :  false )));}))
$mille.macroenv.bind('cdrf', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(( $env.find('x')  )===false) ? $mille.apply( $env.find('cdr')  , $env.find('x')  ) :  false )));}))
$mille.macroenv.bind('ap2', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);return (((!(((!(( $env.find('x')  )===false) ?  $env.find('y')   :  false ))===false) ? (!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $env.find('y')   : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('y')  ))) :  false )));}))
$mille.macroenv.bind('pair?', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  false  : (!(($mille.apply( $env.find('atom?')  , $env.find('x')  ))===false) ?  false  :  true ))));}))
$mille.macroenv.bind('gen-sym-id',  0.0 )
$mille.macroenv.bind('gen-sym', $mille.closure($mille.macroenv, this, function($env) {return ((($env.set('gen-sym-id',$mille.apply( $env.find('1+')  , $env.find('gen-sym-id')  )), undefined)),($mille.apply( $env.find('string->symbol')  ,$mille.apply( $env.find('string-append')  , "#" , $env.find('gen-sym-id')  ))));}))
$mille.macroenv.bind('gen-sym?', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('eqv?')  ,$mille.apply( $env.find('string-ref')  ,$mille.apply( $env.find('symbol->string')  , $env.find('x')  ), 0.0 ), 35 ) :  false )));}))
$mille.macroenv.bind('memq', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('o', a0 === undefined ? null : a0);$env.bind('l', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('l')  ))===false) ?  false  : (!(($mille.apply( $env.find('eq?')  , $env.find('o')  ,$mille.apply( $env.find('car')  , $env.find('l')  )))===false) ?  $env.find('l')   : $mille.apply( $env.find('memq')  , $env.find('o')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  ))))));}))
$mille.macroenv.bind('assq', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('lis', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('lis')  ))===false) ?  false  : (!(($mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('lis')  )), $env.find('x')  ))===false) ? $mille.apply( $env.find('car')  , $env.find('lis')  ) : $mille.apply( $env.find('assq')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('lis')  ))))));}))
$mille.macroenv.bind('symbol-scoped?', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? $mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('s', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('>')  ,$mille.apply( $env.find('string-length')  , $env.find('s')  ), 1.0 ))===false) ? $mille.apply( $env.find('eqv?')  ,$mille.apply( $env.find('string-ref')  , $env.find('s')  , 0.0 ), 58 ) :  false )));}),$mille.apply( $env.find('symbol->string')  , $env.find('x')  )) :  false )));}))
$mille.macroenv.bind('add-scope', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(((!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? (!(($mille.apply( $env.find('gen-sym?')  , $env.find('x')  ))===false) ?  true  : $mille.apply( $env.find('symbol-scoped?')  , $env.find('x')  )) :  true ))===false) ?  $env.find('x')   : $mille.apply( $env.find('string->symbol')  ,$mille.apply( $env.find('string-append')  , ":" , $env.find('pattern-id')  , "#" ,$mille.apply( $env.find('symbol->string')  , $env.find('x')  ))))));}))
$mille.macroenv.bind('remove-scope-string', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('eqv?')  ,$mille.apply( $env.find('string-ref')  , $env.find('x')  , $env.find('k')  ), 35 ))===false) ? $mille.apply( $env.find('substring')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ),$mille.apply( $env.find('string-length')  , $env.find('x')  )) : $mille.apply( $env.find('remove-scope-string')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  )))));}))
$mille.macroenv.bind('remove-scope', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(((!(($mille.apply( $env.find('gen-sym?')  , $env.find('x')  ))===false) ?  false  : $mille.apply( $env.find('symbol-scoped?')  , $env.find('x')  )))===false) ? $mille.apply( $env.find('string->symbol')  ,$mille.apply( $env.find('remove-scope-string')  ,$mille.apply( $env.find('symbol->string')  , $env.find('x')  ), 0.0 )) :  $env.find('x')  )));}))
$mille.macroenv.bind('remove-all-scope', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $env.find('x')   : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('remove-all-scope')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('remove-all-scope')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))) : $mille.apply( $env.find('remove-scope')  , $env.find('x')  )))));}))
$mille.macroenv.bind('compile-macro', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('...') ,$mille.apply( $env.find('car')  , $env.find('x')  )))===false) ? $mille.apply( $env.find('error')  , "ellipse" ) : (!(($mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )))===false) ? (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('...') ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))))===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  , $mille.getSymbol('...') ,$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))),$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )))) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )))) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))))) :  $env.find('x')  ))));}))
$mille.macroenv.bind('match-pattern-ellipse-vec', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3,a4) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);$env.bind('l', a3 === undefined ? null : a3);$env.bind('res', a4 === undefined ? null : a4);return (((!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , $env.find('l')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('consf')  ,$mille.apply( $env.find('match-pattern')  , $env.find('x')  ,$mille.apply( $env.find('vector-ref')  , $env.find('y')  , $env.find('k')  ), $env.find('res')  ),$mille.apply( $env.find('match-pattern-ellipse-vec')  , $env.find('x')  , $env.find('y')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('l')  , $env.find('res')  )))));}))
$mille.macroenv.bind('vec-ellipse?', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('l', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('<')  , $env.find('k')  ,$mille.apply( $env.find('1-')  , $env.find('l')  )))===false) ? $mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  )), $mille.getSymbol('...') ) :  false )));}))
$mille.macroenv.bind('match-pattern-vec', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3,a4) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);$env.bind('l', a3 === undefined ? null : a3);$env.bind('res', a4 === undefined ? null : a4);return (((!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , $env.find('l')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('vec-ellipse?')  , $env.find('x')  , $env.find('k')  , $env.find('l')  ))===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('match-pattern-ellipse-vec')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('k')  ), $env.find('y')  , $env.find('k')  , $env.find('l')  , $env.find('res')  ), $mille.nil ) : $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('match-pattern')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('k')  ),$mille.apply( $env.find('vector-ref')  , $env.find('y')  , $env.find('k')  ), $env.find('res')  ),$mille.apply( $env.find('match-pattern-vec')  , $env.find('x')  , $env.find('y')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('l')  , $env.find('res')  ))))));}))
$mille.macroenv.bind('match-pattern-ellipse', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);$env.bind('res', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('null?')  , $env.find('y')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('consf')  ,$mille.apply( $env.find('match-pattern')  , $env.find('x')  ,$mille.apply( $env.find('car')  , $env.find('y')  ), $env.find('res')  ),$mille.apply( $env.find('match-pattern-ellipse')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('y')  ), $env.find('res')  )))));}))
$mille.macroenv.bind('match-pattern', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);$env.bind('res', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ? (!(($mille.apply( $env.find('null?')  , $env.find('y')  ))===false) ?  $mille.nil  :  false ) : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? (!(((!(($mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))===false) ? $mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )), $mille.getSymbol('...') ) :  false ))===false) ? (!(($mille.apply( $env.find('pair?')  , $env.find('y')  ))===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('match-pattern-ellipse')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('x')  )), $env.find('y')  , $env.find('res')  ), $mille.nil ) : (!(($mille.apply( $env.find('null?')  , $env.find('y')  ))===false) ?  $mille.nil  :  false )) : (!(($mille.apply( $env.find('pair?')  , $env.find('y')  ))===false) ? $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('match-pattern')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('car')  , $env.find('y')  ), $env.find('res')  ),$mille.apply( $env.find('match-pattern')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ),$mille.apply( $env.find('cdr')  , $env.find('y')  ), $env.find('res')  )) :  false )) : (!(((!(($mille.apply( $env.find('vector?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('vector?')  , $env.find('y')  ) :  false ))===false) ? $mille.apply( $env.find('match-pattern-vec')  , $env.find('x')  , $env.find('y')  , 0.0 ,$mille.apply( $env.find('vector-length')  , $env.find('y')  ), $env.find('res')  ) : (!(($mille.apply( $env.find('string?')  , $env.find('x')  ))===false) ? (!(((!(($mille.apply( $env.find('string?')  , $env.find('y')  ))===false) ? $mille.apply( $env.find('eqv?')  , $env.find('x')  , $env.find('y')  ) :  false ))===false) ?  $mille.nil  :  false ) : (!(((!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('memq')  , $env.find('x')  , $env.find('res')  ) :  true ))===false) ? (!(($mille.apply( $env.find('eqv?')  , $env.find('x')  ,$mille.apply( $env.find('remove-scope')  , $env.find('y')  )))===false) ?  $mille.nil  :  false ) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  , $env.find('x')  , $env.find('y')  ), $mille.nil ))))))));}))
$mille.macroenv.bind('extract-idx2', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('k', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('e')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , 0.0 ))===false) ? $mille.apply( $env.find('car')  , $env.find('e')  ) : $mille.apply( $env.find('extract-idx2')  ,$mille.apply( $env.find('1-')  , $env.find('k')  ),$mille.apply( $env.find('cdr')  , $env.find('e')  ))))));}))
$mille.macroenv.bind('assoc-any?', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('s', a0 === undefined ? null : a0);$env.bind('a', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('s')  ))===false) ?  false  : (!(($mille.apply( $env.find('assq')  ,$mille.apply( $env.find('car')  , $env.find('s')  ), $env.find('a')  ))===false) ?  true  : $mille.apply( $env.find('assoc-any?')  ,$mille.apply( $env.find('cdr')  , $env.find('s')  ), $env.find('a')  )))));}))
$mille.macroenv.bind('next-idx?', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('s', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ?  false  : (!(($mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))===false) ? (!(($mille.apply( $env.find('assoc-any?')  , $env.find('s')  , $env.find('x')  ))===false) ?  true  : $mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))) : $mille.apply( $env.find('null?')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))))));}))
$mille.macroenv.bind('extract-idx', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('m', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('s', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('null?')  , $env.find('e')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('car')  , $env.find('e')  )))===false) ? $mille.apply( $env.find('extract-idx')  , $env.find('m')  ,$mille.apply( $env.find('cdr')  , $env.find('e')  ), $env.find('s')  ) : (!(($mille.apply( $env.find('next-idx?')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('e')  )), $env.find('s')  ))===false) ? $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('extract-idx2')  , $env.find('m')  ,$mille.apply( $env.find('car')  , $env.find('e')  )),$mille.apply( $env.find('extract-idx')  , $env.find('m')  ,$mille.apply( $env.find('cdr')  , $env.find('e')  ), $env.find('s')  )) : $mille.apply( $env.find('extract-idx')  , $env.find('m')  ,$mille.apply( $env.find('cdr')  , $env.find('e')  ), $env.find('s')  ))))));}))
$mille.macroenv.bind('extract-symbols-vec', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('l', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , $env.find('l')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('extract-symbols')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('k')  )),$mille.apply( $env.find('extract-symbols-vec')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('l')  )))));}))
$mille.macroenv.bind('extract-symbols', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('extract-symbols')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('extract-symbols')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))) : (!(($mille.apply( $env.find('vector?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('extract-symbols-vec')  , $env.find('x')  , 0.0 ,$mille.apply( $env.find('vector-length')  , $env.find('x')  )) : (!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('cons')  , $env.find('x')  , $mille.nil ) :  $mille.nil ))))));}))
$mille.macroenv.bind('replace-pattern-ellipse1', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);$env.bind('s', a3 === undefined ? null : a3);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('v')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('replace-pattern1')  , $env.find('x')  , $env.find('v')  ),$mille.apply( $env.find('replace-pattern-ellipse1')  , $env.find('x')  , $env.find('e')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('s')  )))));}),$mille.apply( $env.find('extract-idx')  , $env.find('k')  , $env.find('e')  , $env.find('s')  ))));}))
$mille.macroenv.bind('replace-pattern-ellipse', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);return (($mille.apply( $env.find('replace-pattern-ellipse1')  , $env.find('x')  , $env.find('e')  , $env.find('k')  ,$mille.apply( $env.find('extract-symbols')  , $env.find('x')  ))));}))
$mille.macroenv.bind('replace-pattern-ellipse-length1', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('e', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('s', a2 === undefined ? null : a2);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('v')  ))===false) ?  $env.find('k')   : $mille.apply( $env.find('replace-pattern-ellipse-length1')  , $env.find('e')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('s')  ))));}),$mille.apply( $env.find('extract-idx')  , $env.find('k')  , $env.find('e')  , $env.find('s')  ))));}))
$mille.macroenv.bind('replace-pattern-ellipse-length', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);return (($mille.apply( $env.find('replace-pattern-ellipse-length1')  , $env.find('e')  , $env.find('k')  ,$mille.apply( $env.find('extract-symbols')  , $env.find('x')  ))));}))
$mille.macroenv.bind('replace-pattern-vec-length', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('l', a2 === undefined ? null : a2);$env.bind('e', a3 === undefined ? null : a3);return (((!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , $env.find('l')  ))===false) ?  $env.find('k')   : (!(($mille.apply( $env.find('vec-ellipse?')  , $env.find('x')  , $env.find('k')  , $env.find('l')  ))===false) ? $mille.apply( $env.find('replace-pattern-ellipse-length')  , $env.find('x')  , $env.find('e')  , $env.find('k')  ) : $mille.apply( $env.find('replace-pattern-vec-length')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('l')  , $env.find('e')  )))));}))
$mille.macroenv.bind('replace-pattern-ellipse-vec1', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3,a4) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);$env.bind('s', a3 === undefined ? null : a3);$env.bind('z', a4 === undefined ? null : a4);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('v')  ))===false) ?  $env.find('z')   : (($mille.apply( $env.find('vector-set!')  , $env.find('z')  , $env.find('k')  ,$mille.apply( $env.find('replace-pattern1')  , $env.find('x')  , $env.find('v')  ))),($mille.apply( $env.find('replace-pattern-ellipse-vec1')  , $env.find('x')  , $env.find('e')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('s')  , $env.find('z')  ))))));}),$mille.apply( $env.find('extract-idx')  , $env.find('k')  , $env.find('e')  , $env.find('s')  ))));}))
$mille.macroenv.bind('replace-pattern-ellipse-vec', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);$env.bind('k', a2 === undefined ? null : a2);$env.bind('v', a3 === undefined ? null : a3);return (($mille.apply( $env.find('replace-pattern-ellipse-vec1')  , $env.find('x')  , $env.find('e')  , $env.find('k')  ,$mille.apply( $env.find('extract-symbols')  , $env.find('x')  ), $env.find('v')  )));}))
$mille.macroenv.bind('replace-pattern-vec1', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2,a3,a4) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('l', a2 === undefined ? null : a2);$env.bind('e', a3 === undefined ? null : a3);$env.bind('v', a4 === undefined ? null : a4);return (((!(($mille.apply( $env.find('eqv?')  , $env.find('k')  , $env.find('l')  ))===false) ?  $env.find('v')   : (!(($mille.apply( $env.find('vec-ellipse?')  , $env.find('x')  , $env.find('k')  , $env.find('l')  ))===false) ? $mille.apply( $env.find('replace-pattern-ellipse-vec')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('k')  ), $env.find('e')  , $env.find('k')  , $env.find('v')  ) : (($mille.apply( $env.find('vector-set!')  , $env.find('v')  , $env.find('k')  ,$mille.apply( $env.find('replace-pattern1')  ,$mille.apply( $env.find('vector-ref')  , $env.find('x')  , $env.find('k')  ), $env.find('e')  ))),($mille.apply( $env.find('replace-pattern-vec1')  , $env.find('x')  ,$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('l')  , $env.find('e')  , $env.find('v')  )))))));}))
$mille.macroenv.bind('replace-pattern-vec', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($env.bind('l', $mille.apply( $env.find('replace-pattern-vec-length')  , $env.find('x')  , 0.0 ,$mille.apply( $env.find('vector-length')  , $env.find('x')  ), $env.find('e')  ))),($mille.apply( $env.find('replace-pattern-vec1')  , $env.find('x')  , 0.0 , $env.find('l')  , $env.find('e')  ,$mille.apply( $env.find('make-vector')  , $env.find('l')  ))));}))
$mille.macroenv.bind('replace-pattern1', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? (!(((!(($mille.apply( $env.find('pair?')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))===false) ? $mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )), $mille.getSymbol('...') ) :  false ))===false) ? $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('replace-pattern-ellipse')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('x')  )), $env.find('e')  , 0.0 ),$mille.apply( $env.find('replace-pattern1')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('replace-pattern1')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('e')  ),$mille.apply( $env.find('replace-pattern1')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  ))) : (!(($mille.apply( $env.find('vector?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('replace-pattern-vec')  , $env.find('x')  , $env.find('e')  ) : (!(($mille.apply( $env.find('assq')  , $env.find('x')  , $env.find('e')  ))===false) ? $mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('assq')  , $env.find('x')  , $env.find('e')  )) : $mille.apply( $env.find('add-scope')  , $env.find('x')  )))))));}))
$mille.macroenv.bind('replace-pattern', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return ((($env.set('pattern-id',$mille.apply( $env.find('1+')  , $env.find('pattern-id')  )), undefined)),($mille.apply( $env.find('replace-pattern1')  , $env.find('x')  , $env.find('e')  )));}))
$mille.macroenv.bind('add-local-env-lambda', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $env.find('e')   : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('gen-sym')  )),$mille.apply( $env.find('add-local-env-lambda')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )))));}))
$mille.macroenv.bind('add-local-env-letrec', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $env.find('e')   : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('gen-sym')  )),$mille.apply( $env.find('add-local-env-letrec')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )))));}))
$mille.macroenv.bind('replace-local-lambda', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply( $env.find('replace-local-vals')  , $env.find('x')  ,$mille.apply( $env.find('add-local-env-lambda')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('e')  ))));}))
$mille.macroenv.bind('replace-local-letrec', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply( $env.find('replace-local-vals')  , $env.find('x')  ,$mille.apply( $env.find('add-local-env-letrec')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('e')  ))));}))
$mille.macroenv.bind('replace-local-inst', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(((!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('lambda') ,$mille.apply( $env.find('remove-scope')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))))===false) ? (!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )))===false) ?  false  :  true ) :  false ))===false) ? $mille.apply( $env.find('cons')  , $mille.getSymbol('lambda') ,$mille.apply( $env.find('replace-local-lambda')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )) : (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('letrec') ,$mille.apply( $env.find('remove-scope')  ,$mille.apply( $env.find('car')  , $env.find('x')  ))))===false) ? $mille.apply( $env.find('cons')  , $mille.getSymbol('letrec') ,$mille.apply( $env.find('replace-local-letrec')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('replace-local-vals')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('e')  ),$mille.apply( $env.find('replace-local-vals')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  ))))));}))
$mille.macroenv.bind('replace-local-vals', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('assq')  , $env.find('x')  , $env.find('e')  ))===false) ? $mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('assq')  , $env.find('x')  , $env.find('e')  )) : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('replace-local-inst')  , $env.find('x')  , $env.find('e')  ) :  $env.find('x')  )))));}))
$mille.macroenv.bind('extract-level', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('k', a1 === undefined ? null : a1);$env.bind('e', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : (!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? (!(($mille.apply( $env.find('eq?')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $mille.getSymbol('...') ))===false) ? $mille.apply( $env.find('extract-level')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ),$mille.apply( $env.find('1+')  , $env.find('k')  ), $env.find('e')  ) : $mille.apply( $env.find('ap2')  ,$mille.apply( $env.find('extract-level')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('k')  , $env.find('e')  ),$mille.apply( $env.find('extract-level')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('k')  , $env.find('e')  ))) : (!(($mille.apply( $env.find('symbol?')  , $env.find('x')  ))===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  , $env.find('x')  , $env.find('k')  ), $mille.nil ) :  $mille.nil )))));}))
$mille.macroenv.bind('eqv-assoc?', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('f', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('assq')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('f')  ))===false) ? $mille.apply( $env.find('eqv?')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('assq')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('f')  )),$mille.apply( $env.find('cdr')  , $env.find('x')  )) :  true )));}))
$mille.macroenv.bind('check-level-num?', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('e', a0 === undefined ? null : a0);$env.bind('f', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('e')  ))===false) ?  true  : (!(($mille.apply( $env.find('eqv-assoc?')  ,$mille.apply( $env.find('car')  , $env.find('e')  ), $env.find('f')  ))===false) ? $mille.apply( $env.find('check-level-num?')  ,$mille.apply( $env.find('cdr')  , $env.find('e')  ), $env.find('f')  ) :  false ))));}))
$mille.macroenv.bind('check-level?', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);return (($mille.apply( $env.find('check-level-num?')  ,$mille.apply( $env.find('extract-level')  , $env.find('x')  , 0.0 , $mille.nil ),$mille.apply( $env.find('extract-level')  , $env.find('y')  , 0.0 , $mille.nil ))));}))
$mille.macroenv.bind('check-level-and-cons', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('y', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('check-level?')  , $env.find('x')  , $env.find('y')  ))===false) ? $mille.apply( $env.find('cons')  , $env.find('x')  , $env.find('y')  ) : $mille.apply( $env.find('error')  , "level" ))));}))
$mille.macroenv.bind('eval-syntax-rules1', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))))===false) ?  true  : $mille.apply( $env.find('error')  , "syntax-rules" ))),($mille.apply( $env.find('check-level-and-cons')  ,$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('compile-macro')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))))));}))
$mille.macroenv.bind('eval-syntax-rules-list', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-syntax-rules1')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('eval-syntax-rules-list')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))))));}))
$mille.macroenv.bind('eval-syntax-rules', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('eval-syntax-rules-list')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )))));}))
$mille.macroenv.bind('eval-syntax-spec', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('syntax-rules') ,$mille.apply( $env.find('car')  , $env.find('x')  )))===false) ? $mille.apply( $env.find('eval-syntax-rules')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  )) : $mille.apply( $env.find('error')  , "error" ))));}))
$mille.macroenv.bind('find-env', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('e')  ))===false) ?  false  : (!(($mille.apply( $env.find('assq')  , $env.find('x')  ,$mille.apply( $env.find('car')  , $env.find('e')  )))===false) ? $mille.apply( $env.find('assq')  , $env.find('x')  ,$mille.apply( $env.find('car')  , $env.find('e')  )) : $mille.apply( $env.find('find-env')  , $env.find('x')  ,$mille.apply( $env.find('cdr')  , $env.find('e')  ))))));}))
$mille.macroenv.bind('cons-env', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('a', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply( $env.find('cons')  , $env.find('a')  , $env.find('e')  )));}))
$mille.macroenv.bind('eval-replace-list', $mille.closure($mille.macroenv, this, function($env,a0,a1,a2) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('s', a1 === undefined ? null : a1);$env.bind('l', a2 === undefined ? null : a2);return (((!(($mille.apply( $env.find('null?')  , $env.find('l')  ))===false) ? $mille.apply( $env.find('error')  , "malformed" ) : $mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(( $env.find('v')  )===false) ? $mille.apply( $env.find('replace-local-vals')  ,$mille.apply( $env.find('replace-pattern')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('l')  )), $env.find('v')  ), $mille.nil ) : $mille.apply( $env.find('eval-replace-list')  , $env.find('x')  , $env.find('s')  ,$mille.apply( $env.find('cdr')  , $env.find('l')  )))));}),$mille.apply( $env.find('match-pattern')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('l')  )), $env.find('x')  , $env.find('s')  )))));}))
$mille.macroenv.bind('eval-replace1', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(( $env.find('v')  )===false) ? $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-replace-list')  , $env.find('x')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('v')  )),$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('v')  ))),$mille.apply( $env.find('cdr')  , $env.find('v')  )) :  false )));}),$mille.apply( $env.find('cdrf')  ,$mille.apply( $env.find('find-env')  ,$mille.apply( $env.find('remove-scope')  ,$mille.apply( $env.find('car')  , $env.find('x')  )), $env.find('e')  )))));}))
$mille.macroenv.bind('eval-replace', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('pair?')  , $env.find('x')  ))===false) ? $mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(( $env.find('v')  )===false) ? $mille.apply( $env.find('eval-macro1')  ,$mille.apply( $env.find('car')  , $env.find('v')  ),$mille.apply( $env.find('cdr')  , $env.find('v')  )) :  $env.find('x')  )));}),$mille.apply( $env.find('eval-replace1')  , $env.find('x')  , $env.find('e')  )) :  $env.find('x')  )));}))
$mille.macroenv.bind('eval-define-syntax!', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(( $env.find('v')  )===false) ? $mille.apply( $env.find('set-cdr!')  , $env.find('v')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-syntax-spec')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))), $env.find('e')  )) : $mille.apply( $env.find('set-car!')  , $env.find('e')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  , $env.find('x')  ),$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-syntax-spec')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ))), $env.find('e')  )),$mille.apply( $env.find('car')  , $env.find('e')  ))))));}),$mille.apply( $env.find('find-env')  ,$mille.apply( $env.find('car')  , $env.find('x')  ), $env.find('e')  ))));}))
$mille.macroenv.bind('eval-let-syntax', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $mille.nil  : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-syntax-spec')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))), $env.find('e')  )),$mille.apply( $env.find('eval-let-syntax')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  )))));}))
$mille.macroenv.bind('eval-letrec-syntax!', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (((!(($mille.apply( $env.find('null?')  , $env.find('x')  ))===false) ?  $env.find('e')   : (($mille.apply( $env.find('set-car!')  , $env.find('e')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('car')  , $env.find('x')  )),$mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-syntax-spec')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('car')  , $env.find('x')  )))), $env.find('e')  )),$mille.apply( $env.find('car')  , $env.find('e')  )))),($mille.apply( $env.find('eval-letrec-syntax!')  ,$mille.apply( $env.find('cdr')  , $env.find('x')  ), $env.find('e')  ))))));}))
$mille.macroenv.bind('eval-macro1', $mille.closure($mille.macroenv, this, function($env,a0,a1) {$env.bind('x', a0 === undefined ? null : a0);$env.bind('e', a1 === undefined ? null : a1);return (($mille.apply($mille.closure($env, this, function($env,a0) {$env.bind('v', a0 === undefined ? null : a0);return (((!(($mille.apply( $env.find('pair?')  , $env.find('v')  ))===false) ? (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('define-syntax') ,$mille.apply( $env.find('car')  , $env.find('v')  )))===false) ? $mille.apply( $env.find('eval-define-syntax!')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  ), $env.find('e')  ) : (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('let-syntax') ,$mille.apply( $env.find('car')  , $env.find('v')  )))===false) ? $mille.apply( $env.find('cons')  , $mille.getSymbol('begin') ,$mille.apply( $env.find('eval-macro1')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  )),$mille.apply( $env.find('cons-env')  ,$mille.apply( $env.find('eval-let-syntax')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  )), $env.find('e')  ), $env.find('e')  ))) : (!(($mille.apply( $env.find('eq?')  , $mille.getSymbol('letrec-syntax') ,$mille.apply( $env.find('car')  , $env.find('v')  )))===false) ? $mille.apply( $env.find('cons')  , $mille.getSymbol('begin') ,$mille.apply( $env.find('eval-macro1')  ,$mille.apply( $env.find('cdr')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  )),$mille.apply( $env.find('eval-letrec-syntax!')  ,$mille.apply( $env.find('car')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  )),$mille.apply( $env.find('cons-env')  , $mille.nil , $env.find('e')  )))) : $mille.apply( $env.find('cons')  ,$mille.apply( $env.find('eval-macro1')  ,$mille.apply( $env.find('car')  , $env.find('v')  ), $env.find('e')  ),$mille.apply( $env.find('eval-macro1')  ,$mille.apply( $env.find('cdr')  , $env.find('v')  ), $env.find('e')  ))))) :  $env.find('v')  )));}),$mille.apply( $env.find('eval-replace')  , $env.find('x')  , $env.find('e')  ))));}))
$mille.macroenv.bind('eval-macro', $mille.closure($mille.macroenv, this, function($env,a0) {$env.bind('x', a0 === undefined ? null : a0);return (($mille.apply( $env.find('remove-all-scope')  ,$mille.apply( $env.find('eval-macro1')  , $env.find('x')  , $env.find('macroenv')  ))));}))
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax and" +
		"		  (syntax-rules ()" +
		"		    ((_) #t)" +
		"		    ((_ e1) e1)" +
		"		    ((_ e1 e2 ...) (if e1 (and e2 ...) #f))))"
));
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax or" +
		"		  (syntax-rules ()" +
		"		    ((_) #f)" +
		"		    ((_ e1) e1)" +
		"		    ((_ e1 e2 ...)" +
		"		       (let ((x e1))" +
		"		         (if x x (or e2 ...))))))"
));
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax cond" +
		"		  (syntax-rules (else =>)" +
		"		    ((_ (else r1 r2 ...)) (begin r1 r2 ...))" +
		"		    ((_ (cd => r1))" +
		"		      (let ((tm cd)) (if tm (r1 tm))))" +
		"		    ((_ (cd => r1) c1 c2 ...)" +
		"		      (let ((tm cd))" +
		"		        (if tm" +
		"		            (r1 tm)" +
		"		            (cond c1 c2 ...))))" +
		"		    ((_ (cd)) test)" +
		"		    ((_ (cd) c1 c2 ...)" +
		"		      (let ((tm cd))" +
		"		        (if tm tm (cond c1 c2 ...))))" +
		"		    ((_ (cd r1 r2 ...))" +
		"		      (if cd (begin r1 r2 ...)))" +
		"		    ((_ (cd r1 r2 ...) c1 c2 ...)" +
		"		      (if cd" +
		"		          (begin r1 r2 ...)" +
		"		          (cond c1 c2 ...)))))"
));
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax case" +
		"		  (syntax-rules (else)" +
		"		    ((case (key ...) cs ...)" +
		"		      (let ((ak (key ...)))" +
		"		        (case ak cs ...)))" +
		"		    ((case key (else r1 ...)) (begin r1 ...))" +
		"		    ((case key ((atoms ...) r1 ...))" +
		"		      (if (memv key '(atoms ...))" +
		"		          (begin r1 ...)))" +
		"		    ((case key ((atoms ...) r1 ...) cl ...)" +
		"		      (if (memv key '(atoms ...))" +
		"		          (begin r1 ...)" +
		"		          (case key cl ...)))))"
));
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax let" +
		"		  (syntax-rules ()" +
		"		    ((let ((name val) ...)) (if #f #f))" +
		"		    ((let ((name val) ...) body1 body2 ...)" +
		"		      ((lambda (name ...) body1 body2 ...)" +
		"		         val ...))" +
		"		    ((let tag ((name val) ...) body1 body2 ...)" +
		"		      ((let ((tag (if #f #f)))" +
		"		        (set! tag (lambda (name ...) body1 body2 ...))" +
		"		        tag) val ...))))"
));
$mille.macroenv.call('eval-macro', $mille.readString(
		"(define-syntax let*" +
		"		  (syntax-rules ()" +
		"		    ((_ () e1 ...)" +
		"		     (let () e1 ...))" +
		"		    ((_ ((x1 v1) (x2 v2) ...) e1 ...)" +
		"		     (let ((x1 v1))" +
		"		       (let* ((x2 v2) ...) e1 ...)))))"
));
$mille.eval = function($env, x) {
	var o;
	o = $mille.macroenv.call('eval-macro', x);
	return $mille.evalbas($env, o);
};
$env.bind('eval', $mille.closure($mille.genv, this, $mille.eval));
